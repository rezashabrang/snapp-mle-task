# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry_core>=1.0.0"]

[tool.poetry]
authors = ["snapp <rezashabrang.m@gmail.com>"]
description = "Snapp Pin Fixing Problem Task"
homepage = "https://github.com/rezashabrang/snapp-mle-task"
license = "MIT"
name = "snapp-mle-task"
readme = "README.md"
repository = "https://github.com/rezashabrang/snapp-mle-task"
version = "0.1.0"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [] #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
]

[tool.poetry.dependencies]
fastapi = "^0.111.0"
numpy = "1.26.0"
pandas = "^2.2.2"
psycopg2 = "^2.9.9"
python = "3.12"
uvicorn = "^0.30.1"

[tool.poetry.group.dev.dependencies]
anybadge = "^1.14.0"
bandit = "^1.7.9"
black = "^24.4.2"
coverage = "^7.5.3"
coverage-badge = "^1.1.1"
darglint = "^1.8.1"
interrogate = "^1.7.0"
isort = {extras = ["colors"], version = "^5.13.2"}
mypy = "^1.10.0"
mypy-extensions = "^1.0.0"
pre-commit = "^3.7.1"
pybadges = "^3.0.0"
pydocstyle = "^6.3.0"
pylint = "^3.2.3"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-html = "^4.1.1"
pyupgrade = "^3.16.0"
radon = "^6.0.1"
safety = "^3.2.3"

[tool.poetry.group.rd.dependencies]
folium = "^0.16.0"
geopandas = "^0.14.4"
hdbscan = "0.8.36"
jupyter = "^1.0.0"
matplotlib = "^3.9.0"
osmnx = "^1.9.3"
plotly = "^5.22.0"
shapely = "^2.0.4"

[tool.black]
# https://github.com/psf/black
color = true
line-length = 88
target-version = ["py312"]

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
line_length = 88
py_version = 312

color_output = true
include_trailing_comma = true
indent = 4
known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
multi_line_output = 3
profile = "black"
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
color_output = true
pretty = true
python_version = 3.12
show_traceback = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "snapp-mle-task"

[coverage.run]
branch = true

[tool.coverage.report]
fail_under = 85
show_missing = true

[tool.bandit]
skips = ["B101", "B601"]
tests = ["B201"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile",
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput",
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output",
]

[tool.flake8]
max-line-length = 88

[tool.pydocstyle]
convention = "google"

[tool.pylint.'MESSAGES CONTROL']
disable = "W0703, R0912, R0913, R0914, R0915, E0401, R0801, W0613"
max-line-length = 88
